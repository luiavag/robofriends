{"version":3,"sources":["actions.js","api/api.js","constants.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","serviceWorker.js","reducers.js","index.js"],"names":["requestRobots","dispatch","link","type","fetch","then","response","json","data","payload","catch","error","Card","name","email","id","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchChange","aria-label","placeholder","onChange","Scroll","props","children","ErrorBoundry","state","hasError","info","this","Component","CounterButton","updateCount","setState","count","nextProps","nextState","style","color","onClick","Header","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","event","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleWare","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.bf0e5ec0.chunk.js","sourcesContent":["import { apiCall } from './api/api';\r\n\r\nimport {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n}); // wrapping a return functionn with () returns it automatically\r\n\r\n//  {\r\n//     console.log('redux action setSearchField', text);\r\n//     return {\r\n//         type: CHANGE_SEARCH_FIELD,\r\n//         payload: text\r\n//     }\r\n// } // old school retun method\r\n\r\n// export const requestRobots = () => (dispatch) => {\r\n//     dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n//     fetch('https://jsonplaceholder.typicode.com/users')\r\n//         .then(response => response.json())\r\n//         .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n//         .catch(err => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err }))\r\n// }\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING })\r\n    apiCall('https://jsonplaceholder.typicode.com/users')\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const apiCall = (link) =>\r\n    fetch(link).then(response => response.json());","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return (\r\n        <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robotsFace\"/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    // if (true) {\r\n    //     throw new Error('Noooooooooooooo');\r\n    // } // error testing\r\n    // console.log('CardList');\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return (\r\n                        <Card\r\n                            key={i}\r\n                            id={robots[i].id}\r\n                            name={robots[i].name}\r\n                            email={robots[i].email}\r\n                            />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    // console.log('SearchBox');\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n                aria-label=\"Search robots\"\r\n                className=\"pa3 ba b--green bg-lightest-blue\"\r\n                type=\"text\" \r\n                placeholder=\"Search robots\"\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    // console.log('Scroll');\r\n    return (\r\n        // <div style={{ overflowY: 'scroll', border: '4px solid black', height: '800px' }}>\r\n        <div className=\"overflow-y-scroll ba bw3-ns b--black vh-75\">\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n    componentDidCatch(error, info) {\r\n        this.state({ hasError: true })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError === true) {\r\n            return <h1>Ooooops. That's not good!</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\n\r\nclass CounterButton extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            count: 1000\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        // console.log(nextProps, nextState)\r\n        if (this.state.count !== nextState) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    updateCount = () => {\r\n        this.setState(state => {\r\n            return { count: this.state.count + 1 }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        // console.log('CounterButton');\r\n        return (\r\n            <button style={{color: this.props.color}} onClick={this.updateCount}>\r\n                Count: {this.state.count}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CounterButton;","import React, { Component } from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return false;\r\n    }\r\n    \r\n    render() {\r\n        //console.log('Header');\r\n        return (\r\n            <div>\r\n                <h1 className='f1'>RoboFriends</h1>\r\n                <CounterButton color={'blue'} />\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { requestRobots, setSearchField } from '../actions';\r\n\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\n// import { robots } from '../robots';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport Header from '../components/Header';\r\n\r\nimport './App.css';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n    // constructor() {\r\n    //     super();\r\n    //     this.state = {\r\n    //         robots: [],\r\n    //         // searchField: ''\r\n    //     }\r\n    //     // console.log('constructor');\r\n    // }\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n        // fetch('https://jsonplaceholder.typicode.com/users')\r\n        //     .then(response => response.json())\r\n        //     .then(users => this.setState({ robots: users }));\r\n        // console.log(this.props.store.getState());\r\n        // this.setState({robots: robots});\r\n        // console.log('componentDidMount');\r\n    }\r\n\r\n    // onSearchChange = (event) => {\r\n    //     this.setState({ searchField: event.target.value })\r\n    //     // console.log('onSearchChange');\r\n    // }\r\n\r\n    render() {\r\n        // const { robots } = this.state;\r\n        // const { robots, searchField } = this.state;\r\n        const { robots, searchField, onSearchChange, isPending } = this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        });\r\n        // console.log('render');\r\n        return isPending ?\r\n            (\r\n                <div className='tc'>\r\n                    <h1 className='f1'>Loading......</h1>\r\n                </div>\r\n            )\r\n            :\r\n            (\r\n                <div className='tc'>\r\n                    <Header />\r\n                    {/* <SearchBox searchChange={this.onSearchChange} /> */}\r\n                    <SearchBox searchChange={onSearchChange} />\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots={filteredRobots} />\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    // console.log('redux reducer searchRobots', action.type);\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            //return { ...state, searchField: action.payload }; // short hand with object spread opperator\r\n            return Object.assign({}, state, { searchField: action.payload });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true })\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false })\r\n        default:\r\n            return state;\r\n    }\r\n}","// import './wdyr'; // why did you re-render\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunkMiddleWare from 'redux-thunk';\n// import { createLogger } from 'redux-logger'; // with looger\nimport 'tachyons';\n\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { requestRobots, searchRobots } from './reducers';\n\nimport './index.css';\n\nconst rootReducer = combineReducers({ requestRobots, searchRobots });\n\n// const logger = createLogger(); // with looger\n// const store = createStore(rootReducer, applyMiddleware(thunkMiddleWare, logger)); // with looger\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleWare)); // without looger\n\n// const store = createStore(\n//   searchRobots, /* preloadedState, */\n//   window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n// ); // with redux dev tools\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}